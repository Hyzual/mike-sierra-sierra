name: CI pipeline
on:
  push:
    branches-ignore:
     - 'dependabot/**'
  pull_request_target:

permissions: read-all

jobs:
  backend_tests:
    name: Test Go server
    runs-on: ubuntu-20.04

    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v13

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Install go from Nix
        run: nix-env --file tools/nix/go-build-tools.nix --install

      # Install dependencies

      - name: Go dependencies
        run: go mod download

      # Build and test Go code

      - name: Build
        run: make build-ci

      - name: Go test coverage
        run: make coverage-go

      - name: Test race conditions
        run: make race

  backend_lint:
    name: Lint Go server
    runs-on: ubuntu-20.04
    steps:
      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: v1.39.0

  frontend_tests:
    name: Test Front-end
    runs-on: ubuntu-20.04

    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v13

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Install npm from Nix
        run: nix-env --file tools/nix/npm-build-tools.nix --install

      # Install dependencies

      - name: NPM dependencies
        run: npm install --no-audit

      # Run Jest tests

      - name: Jest test coverage
        run: npm run test --silent -- --coverage

      # Static analysis and conformity to coding style

      - name: eslint
        run: npm run eslint --silent -- .

      - name: Stylelint
        run: npm run stylelint --silent -- ./styles

      - name: Prettier for HTML and Javascript config
        run: npm run prettier --silent -- --list-different ./templates .eslintrc.js .stylelintrc.js

  docker_image:
    name: Test Docker image
    runs-on: ubuntu-20.04
    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v13

      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Install goss and dgoss from Nix
        run: nix-env --file tools/nix/docker-build-tools.nix --install

      - name: Build the Docker image
        uses: docker/build-push-action@v2.6.1
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: hyzual/mike-sierra-sierra:latest

      - name: Run goss tests
        run: make dgoss-ci

  publish_image:
    name: Publish to Docker Hub
    runs-on: ubuntu-20.04
    # Publish docker image if all tests succeed and push is on master branch
    needs: ['backend_tests', 'backend_lint', 'frontend_tests', 'docker_image']
    if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v2.3.4

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push the production image
        uses: docker/build-push-action@v2.6.1
        with:
          push: true
          tags: hyzual/mike-sierra-sierra:latest
